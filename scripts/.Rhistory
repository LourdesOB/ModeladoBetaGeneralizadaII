# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="navy", lwd=3,
main="FDE vs FDT")
lines(ecdf(simulations[,1]), col="lightseagreen", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="green", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="navy", lwd=3,
main="FDE vs FDT")
lines(ecdf(simulations[,1]), col="lightseagreen", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="green", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="navy", lwd=3,
main="FDE vs FDT")
lines(ecdf(simulations[,1]), col="darkorchid4", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="green", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="ligthblue", lwd=3,
main="FDE vs FDT")
lines(ecdf(simulations[,1]), col="darkorchid4", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="green", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
lines(ecdf(simulations[,1]), col="darkorchid4", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="green", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
lines(ecdf(simulations[,1]), col="darkorchid4", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
ecdf(simulations[,1])
plot(ecdf(simulations[,1]))
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
lines(Ecdf(simulations[,1]), col="darkorchid4", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
plot(ecdf(simulations[,1]))
ecdf(simulations[,1])
lines(ecdf(simulations[,1]))
lines(ecdf(simulations[,1]))
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
lines(ecdf(simulations[,1]))
plot(ecdf(simulations[,1]))
plot(ecdf(rgamma(40, 2, 1/3)))
lines(x, pgamma(x, shape = 2, scale = 3), type="l", col = "red")
plot(ecdf(rgamma(40, 2, 1/3)))
lines(x, pgamma(x, shape = 2, scale = 3), type="l", col = "red")
x<-rgamma(40,2,scale=3)
p<-qplot(x,stat="ecdf",geom="step")+theme_bw()
p<-p+stat_function(fun=pgamma,color="blue",args=list(shape=2,scale=3))
p<-p+labs(title="ECDF and theoretical CDF")
p
library(ggplot2)
set.seed(235)
x<-rgamma(40,2,scale=3)
p<-qplot(x,stat="ecdf",geom="step")+theme_bw()
p<-p+stat_function(fun=pgamma,color="blue",args=list(shape=2,scale=3))
p<-p+labs(title="ECDF and theoretical CDF")
p
help(ggplot2)
x <- rnorm(10000)
plot(ecdf(x))
x11()
x <- rnorm(10000)
plot(ecdf(x))
x <- rnorm(10000)
plot(ecdf(x))
x <- rnorm(10000)
plot(ecdf(x))
library("ggplot2")
df <- data.frame(
x = c(rnorm(100, 0, 3), rnorm(100, 0, 10)),
g = gl(2, 100)
)
ggplot(df, aes(x)) + stat_ecdf(geom = "step")
library(ggplot2)
df <- data.frame(
x = c(rnorm(100, 0, 3), rnorm(100, 0, 10)),
g = gl(2, 100)
)
ggplot(df, aes(x)) + stat_ecdf(geom = "step")
dev.off() # Fin de guardado de imagen
library(ggplot2)
df <- data.frame(
x = c(rnorm(100, 0, 3), rnorm(100, 0, 10)),
g = gl(2, 100)
)
ggplot(df, aes(x)) + stat_ecdf(geom = "step")
dev.off() # Fin de guardado de imagen
n = 200
png('../plots/test.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]), (1:n)/n, type = 's', ylim = c(0, 1))
dev.off() # Fin de guardado de imagen
n = 200
png('../plots/test.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
plot(sort(simulations[,1]), (1:n)/n, type = 's', ylim = c(0, 1))
dev.off() # Fin de guardado de imagen
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
n = 200
png('../plots/test.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
plot(sort(simulations[,1]), (1:n)/n, type = 's', ylim = c(0, 1))
dev.off() # Fin de guardado de imagen
n = 200
png('../plots/test.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
lines(sort(simulations[,1]), (1:n)/n, ylim = c(0, 1))
dev.off() # Fin de guardado de imagen
n = 200
png('../plots/test.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
lines(ecdf(sort(simulations[,1])))
dev.off() # Fin de guardado de imagen
# Rodolfo Ferro Pérez
# ferro@cimat.mx
# Validar el modelo propuesto.
# Liberar memoria:
rm(list=ls())
# IMPORTANTE: Si utilizas RStudio, hay que definir el directorio de trabajo
# al de los archivos fuente, puedes ver el directorio actual con getwd()
# Breaks para histogramas:
breaks = 50
# Lista de archivos:
# "samp_GB2_200.csv"
# "samp_GB2_500.csv"
# "samp_LNorm_200.csv"
# "samp_LNorm_500.csv"
# "samp_LNormMix_200.csv"
# "samp_LNormMix_500.csv"
# "samp_RealData_200.csv"
# "samp_RealData_500.csv"
# Archivo en uso:
file_name = "samp_GB2_200.csv"
file_name = paste("../csv/", file_name, sep="")
# OBSERVACIÓN:
# Definición manual de parámetros para fits (checar correspondiente archivo fit):
a = 2.19
b = 13415.19
p = 1.45
q = 0.53
#================== Validar modelo: ==================#
# Leer datos simulados desde csv:
simulations = read.csv(file=file_name, header = TRUE, sep = ",")
#print(simulations[,1])
# I. Función de Distribución Empírica (FDE):
png('../plots/FDE.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
curve(pgb2(x, a, b, p, q),col="turquoise3", lwd=3,
main="FDE vs FDT")
lines(ecdf(simulations[,1]), col="darkorchid4", lwd=2)
dev.off() # Fin de guardado de imagen
# II. Gráfica cuantil-cuantil:
N = length(simulations[,1])
int = seq((1/(N+1)),(N/(N+1)),by=(1/(N+1)))
vec = qgb2(int, a, b, p, q)
png('../plots/QQ.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
plot(sort(simulations[,1]),sort(vec),main="Cuantil-Cuantil (QQ)", col="navy", lwd=3)
abline(0,1,col="red",lwd="2")
dev.off() # Fin de guardado de imagen
# III. Densidad sobre histograma
png('../plots/histogram_density.png', width=4, height=4, units="in", res=300) # Para iniciar el guardado de imagen
hist(simulations[,1], freq=F,main="Histograma VS \n Densidad estimada",
#xlab="Simulación",ylab="Frecuencia de tiempos",
border="white", col="steelblue", breaks=breaks)
#lines(density(simulations[,1], adjust=0.8), col="red", lwd=1)
curve(dgb2(x, a, b, p, q), col="olivedrab3", add = T, lwd=2)
dev.off() # Fin de guardado de imagen
